using System;
using System.Collections.Generic;
using System.Reflection;
using Newtonsoft.Json;

namespace Client.Model
{
	/// <summary>
	///  Respresents metadata associated with the series. Each series has a
	///  globally unique id that is generated by the system and a user defined key.
	///  The key must be unique among all of your series. Each series may have a set
	///  of tags and attributes that can be used to filter series during bulk reads.
	///  Attributes are key/value pairs. Both the key and attribute must be strings.
	///  Tags are keys with no values. Tags must also be strings.
	/// </summary>
	public class Series
	{
        public Series()
        {
            Name = "";
            Attributes = new Dictionary<string, string>();
            Tags = new List<string>();
        }

		[JsonProperty(PropertyName = "id", Required = Required.Always)]
		public string Id { get; set; }

		[JsonProperty(PropertyName = "key", Required = Required.Always)]
		public string Key { get; set; }

		[JsonProperty(PropertyName = "name", Required = Required.Always)]	
		public string Name { get; set; }

		[JsonProperty(PropertyName = "attributes", Required = Required.Always)]
		public Dictionary<string, string> Attributes { get; set; }

		[JsonProperty(PropertyName = "tags", Required = Required.Always)]
		public List<string> Tags { get; set; } 
	
		public override string ToString()
		{
			return string.Format("Series: \n\tid:\t{0}\n\tkey:\t{1}\n\tname:\t{2}\n\ttags:\t{3}\n\tattr:\t{4}", Id, Key, Name, Tags, Attributes);
		}

        public override bool Equals(object obj)
        {
            var other = obj as Series;

            return other != null &&
                Id.Equals(other.Id) &&
                Key.Equals(other.Key);
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode() ^
                Key.GetHashCode() ^
                Name.GetHashCode() ^
                Attributes.GetHashCode() ^
                Tags.GetHashCode();
        }


	}
}